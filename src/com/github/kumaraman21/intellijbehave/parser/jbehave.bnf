{
  parserClass="com.github.kumaraman21.intellijbehave.parser.JBehaveParser"
  parserUtilClass="com.github.kumaraman21.intellijbehave.parser.JBehaveParserUtil"
  elementTypeHolderClass="com.github.kumaraman21.intellijbehave.parser.IJBehaveElementType"
  elementTypePrefix="JB_"
  elementTypeClass="com.github.kumaraman21.intellijbehave.highlighter.JBehaveElementType"
  tokenTypeClass="com.github.kumaraman21.intellijbehave.highlighter.JBehaveTokenType"
  psiClassPrefix="JBehave"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.kumaraman21.intellijbehave.psi"
  psiImplPackage="com.github.kumaraman21.intellijbehave.psi.impl"

  tokens=[
    TOKEN_META = 'Meta:'
    TOKEN_NARRATIVE = 'Narrative:'
    TOKEN_SCENARIO = 'Scenario:'
    TOKEN_GIVEN_STORIES= 'GivenStories:'
    TOKEN_GIVEN = 'Given'
    TOKEN_WHEN='When'
    TOKEN_THEN='Then'
    TOKEN_AND='And'
    TOKEN_EXAMPLES='Examples:'
    TOKEN_LIFECYCLE="Lifecycle:"
    TOKEN_BEFORE="Before:"
    TOKEN_AFTER="After:"
    TOKEN_COLON=":"
    TOKEN_COMMA=","
    TOKEN_DBRACKET_OPEN = "<<"
    TOKEN_DBRACKET_CLOSE = ">>"
    TOKEN_BRACKET_OPEN = "<"
    TOKEN_BRACKET_CLOSE = ">"
    TOKEN_NEWLINE = "regexp:[ \t\f]*(\r|\n|\r\n|\Z)"
    TOKEN_SPACE='regexp:[ \t\f]+'
    TOKEN_COMMENT="regexp:\!--.*"

    TOKEN_USER_INJECT = 'regexp:<<[^\t\n\x0B\f\r<>]+>>'
    TOKEN_INJECT = 'regexp:<[^\t\n\x0B\f\r<>]+>'
    TOKEN_PIPE='regexp:\|'
    TOKEN_PATH = 'regexp:([A-Z]:|<.+>|<<.+>>)?([a-zA-Z0-9]|<.+>|<<.+>>|(/|\\))([a-zA-Z0-9]|<.+>|<<.+>>|_|@|\.|-)+((/|\\)([a-zA-Z0-9]|<.+>|<<.+>>|_|@|\.|-|\ )+)+([a-zA-Z0-9]|_|@|\.|-|/)'
    TOKEN_IP = "regexp:[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+"
    TOKEN_MKEY="regexp:@[^ \t\n\x0B\f\r\|<>]+"
    TOKEN_WORD="regexp:[^ \t\n\x0B\f\r\|,@:<>]+"
  ]
  extends("StoryPath")="com.github.kumaraman21.intellijbehave.parser.StoryPath"
  extends("Step")="com.github.kumaraman21.intellijbehave.parser.ScenarioStep"
  extends("ScenarioTitle|TableCell|Table|TableRow|Description|NarrativeText|StepLine|Uri|IpAdress|MetaKey|MetaValue|Lifecycle")="com.github.kumaraman21.intellijbehave.parser.ParserRule"
  extends("Scenario")="com.github.kumaraman21.intellijbehave.parser.Scenario"
  extends("MetaStatement")="com.github.kumaraman21.intellijbehave.parser.MetaStatement"
  extends("Narrative")="com.github.kumaraman21.intellijbehave.parser.Narrative"
  extends("GivenStories")="com.github.kumaraman21.intellijbehave.parser.GivenStories"

}
root ::= !<<eof>> WhiteSpace ( Table | Story ) WhiteSpace {pin=3}
Story ::=   StepComment? Description?
            WhiteSpace StepComment? MetaStatement?
            WhiteSpace StepComment? Narrative?
            WhiteSpace StepComment? GivenStories?
            WhiteSpace StepComment? Lifecycle?
            WhiteSpace StepComment? (WhiteSpace Scenario)*
Description ::= MultiTextLine
MetaStatement ::= TOKEN_META (Newline)* ((Space|Newline)* (MetaElement|StepComment))* {pin=1 recoverWhile=RecoverMeta}
MetaElement::= !(TOKEN_NARRATIVE|TOKEN_GIVEN_STORIES|TOKEN_LIFECYCLE|TOKEN_SCENARIO) (MetaKey Space MetaValue |MetaKey | MetaValue) {pin=2 }
MetaKey::= TOKEN_MKEY {pin=1 }
MetaValue::= Line

private RecoverMeta ::= !(TOKEN_NARRATIVE|TOKEN_GIVEN_STORIES|TOKEN_LIFECYCLE|TOKEN_SCENARIO|TOKEN_WHEN|TOKEN_GIVEN|TOKEN_THEN|TOKEN_AND|Newline|TOKEN_COMMENT|TOKEN_EXAMPLES)

Narrative ::= TOKEN_NARRATIVE WhiteSpace NarrativeText? {pin=1 }
NarrativeText ::= MultiTextLine

GivenStories::= TOKEN_GIVEN_STORIES WhiteSpace StoryPaths? {pin=1 recoverWhile=RecoverMeta}
StoryPaths ::= StoryPath (WhiteSpace TOKEN_COMMA WhiteSpace StoryPath)* {pin=1}
StoryPath ::= TOKEN_PATH {pin=1}

Lifecycle::= TOKEN_LIFECYCLE WhiteSpace LifecycleBefore? WhiteSpace LifecycleAfter? {pin=1}
LifecycleBefore::= TOKEN_BEFORE WhiteSpace (WhiteSpace Step)* {pin=1}
LifecycleAfter::= TOKEN_AFTER WhiteSpace (WhiteSpace Step)* {pin=1}

//private RecoverLife ::= !(TOKEN_NARRATIVE|TOKEN_GIVEN_STORIES|TOKEN_LIFECYCLE|TOKEN_SCENARIO|TOKEN_WHEN|TOKEN_GIVEN|TOKEN_THEN|TOKEN_AND|Newline|TOKEN_COMMENT|TOKEN_EXAMPLES)

Scenario ::= !(TOKEN_LIFECYCLE|TOKEN_BEFORE|TOKEN_AFTER|TOKEN_WHEN|TOKEN_GIVEN|TOKEN_THEN|TOKEN_AND)
             TOKEN_SCENARIO WhiteSpace ScenarioTitle?
             WhiteSpace StepComment?
             WhiteSpace MetaStatement?
             WhiteSpace StepComment?
             WhiteSpace GivenStories?
             ((WhiteSpace Step |WhiteSpace StepComment)+
             (WhiteSpace Examples)?)* {pin=2 recoverWhile=RecoverMeta}
ScenarioTitle ::= Line

Step ::=  !(TOKEN_LIFECYCLE|TOKEN_BEFORE|TOKEN_AFTER) StepPar SpaceStar StepArgument {pin=2 recoverWhile=RecoverMeta}
StepPar ::= TOKEN_WHEN|TOKEN_GIVEN|TOKEN_THEN|TOKEN_AND

private StepComment ::= TOKEN_COMMENT WhiteSpace

StepArgument ::=  StepLine SpaceStar (WhiteSpace Table | StoryPaths) | StepLine

private StepSimpleWord ::= Uri|IpAddress|Alnum|TOKEN_USER_INJECT|TOKEN_INJECT|TOKEN_BRACKET_OPEN|TOKEN_BRACKET_CLOSE|','|'.'
private StepWord ::= StepSimpleWord+
StepLine ::= StepWord (WordSeparator StepWord)* Space* TOKEN_COLON?

Examples ::= TOKEN_EXAMPLES WhiteSpace (Table|StoryPath) {pin=1}

Table ::= (WhiteSpace TableRow)+
TableRow ::= TOKEN_PIPE SpaceStar (TableCell SpaceStar)? TOKEN_PIPE (SpaceStar (TableCell SpaceStar)?  TOKEN_PIPE)* {pin=1}
TableCell ::=  (Line|TOKEN_META|MetaElement)+

private MultiTextLine ::= (WhiteSpace Line)+

private SimpleWord ::= StepSimpleWord|StoryPath|TOKEN_COLON|TOKEN_MKEY|TOKEN_AND|TOKEN_GIVEN|TOKEN_WHEN|TOKEN_THEN
private Word ::= SimpleWord+
private WordSeparator ::= Space+
private Line ::= Word (WordSeparator Word)*

UriWord ::= Alnum|TOKEN_USER_INJECT|TOKEN_INJECT
UriIdentifier ::= IpAddress| (UriWord|'.')+
Uri::= Alnum TOKEN_COLON Word '@' UriIdentifier (TOKEN_COLON Alnum)? {pin=5}
IpAddress ::= TOKEN_IP | Alnum ('.' Alnum)+
private Alnum::=TOKEN_WORD

private Newline ::= TOKEN_NEWLINE {name="newline"}
private Space ::= TOKEN_SPACE {name="space"}
private SpaceStar ::= TOKEN_SPACE* {name="spaces"}
private WhiteSpace ::= Newline* SpaceStar {name="whitespace"}
